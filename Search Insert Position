35. Search Insert Position
Easy
Topics
premium lock icon
Companies
Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [1,3,5,6], target = 5
Output: 2
Example 2:

Input: nums = [1,3,5,6], target = 2
Output: 1
Example 3:

Input: nums = [1,3,5,6], target = 7
Output: 4
 

Constraints:

1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums contains distinct values sorted in ascending order.
-104 <= target <= 104

class Solution {
    public int searchInsert(int[] nums, int target) {
        int left = 0, right = nums.length - 1;
        int ans = nums.length; // default: if target is bigger than all elements

        while (left <= right) {
            int mid = left + (right - left) / 2;

            if (nums[mid] >= target) {
                ans = mid;       // possible insert position
                right = mid - 1; // try to find smaller index
            } else {
                left = mid + 1;  // target is bigger â†’ move right
            }
        }

        return ans;
    }

    // Quick test
    public static void main(String[] args) {
        Solution s = new Solution();

        int[] nums1 = {1, 3, 5, 6};
        System.out.println(s.searchInsert(nums1, 5)); // Output: 2

        int[] nums2 = {1, 3, 5, 6};
        System.out.println(s.searchInsert(nums2, 2)); // Output: 1

        int[] nums3 = {1, 3, 5, 6};
        System.out.println(s.searchInsert(nums3, 7)); // Output: 4

        int[] nums4 = {1, 3, 5, 6};
        System.out.println(s.searchInsert(nums4, 0)); // Output: 0
    }
}
