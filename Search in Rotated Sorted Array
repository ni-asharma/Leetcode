33. Search in Rotated Sorted Array
Medium
Topics
premium lock icon
Companies
There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly left rotated at an unknown index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be left rotated by 3 indices and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1
Example 3:

Input: nums = [1], target = 0
Output: -1
 

Constraints:

1 <= nums.length <= 5000
-104 <= nums[i] <= 104
All values of nums are unique.
nums is an ascending array that is possibly rotated.
-104 <= target <= 104

class Solution {
    public int search(int[] nums, int target) {
        int left = 0, right = nums.length - 1;

        while (left <= right) {
            int mid = left + (right - left) / 2;

            if (nums[mid] == target) {
                return mid; // found target
            }

            // Check which half is sorted
            if (nums[left] <= nums[mid]) {  
                // Left half is sorted
                if (nums[left] <= target && target < nums[mid]) {
                    right = mid - 1; // target in left half
                } else {
                    left = mid + 1;  // target in right half
                }
            } else {  
                // Right half is sorted
                if (nums[mid] < target && target <= nums[right]) {
                    left = mid + 1;  // target in right half
                } else {
                    right = mid - 1; // target in left half
                }
            }
        }

        return -1; // not found
    }

    // Quick test
    public static void main(String[] args) {
        Solution s = new Solution();

        int[] nums1 = {4,5,6,7,0,1,2};
        System.out.println(s.search(nums1, 0)); // Output: 4

        int[] nums2 = {4,5,6,7,0,1,2};
        System.out.println(s.search(nums2, 3)); // Output: -1

        int[] nums3 = {1};
        System.out.println(s.search(nums3, 0)); // Output: -1

        int[] nums4 = {5,6,7,1,2,3,4};
        System.out.println(s.search(nums4, 3)); // Output: 5
    }
}
