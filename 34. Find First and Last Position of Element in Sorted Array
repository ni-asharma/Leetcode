34. Find First and Last Position of Element in Sorted Array
Medium
Topics
premium lock icon
Companies
Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]
 

Constraints:

0 <= nums.length <= 105
-109 <= nums[i] <= 109
nums is a non-decreasing array.
-109 <= target <= 109

class Solution {
    public int[] searchRange(int[] nums, int target) {
        int first = findFirst(nums, target);
        int last = findLast(nums, target);
        return new int[]{first, last};
    }

    private int findFirst(int[] nums, int target) {
        int left = 0, right = nums.length - 1;
        int ans = -1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] == target) {
                ans = mid;        // possible answer
                right = mid - 1;  // move left to find earlier occurrence
            } else if (nums[mid] < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return ans;
    }

    private int findLast(int[] nums, int target) {
        int left = 0, right = nums.length - 1;
        int ans = -1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] == target) {
                ans = mid;       // possible answer
                left = mid + 1;  // move right to find later occurrence
            } else if (nums[mid] < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return ans;
    }

    // Quick test
    public static void main(String[] args) {
        Solution s = new Solution();

        int[] nums1 = {5,7,7,8,8,10};
        int[] res1 = s.searchRange(nums1, 8);
        System.out.println(res1[0] + " " + res1[1]); // Output: 3 4

        int[] nums2 = {5,7,7,8,8,10};
        int[] res2 = s.searchRange(nums2, 6);
        System.out.println(res2[0] + " " + res2[1]); // Output: -1 -1

        int[] nums3 = {};
        int[] res3 = s.searchRange(nums3, 0);
        System.out.println(res3[0] + " " + res3[1]); // Output: -1 -1
    }
}
