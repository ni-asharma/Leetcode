Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.

 

Example 1:

Input: nums = [-4,-1,0,3,10]
Output: [0,1,9,16,100]
Explanation: After squaring, the array becomes [16,1,0,9,100].
After sorting, it becomes [0,1,9,16,100].
Example 2:

Input: nums = [-7,-3,2,3,11]
Output: [4,9,9,49,121]
 

Constraints:

1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums is sorted in non-decreasing order.

class Solution {
    public int[] sortedSquares(int[] nums) {
        int i=0;
        int n=nums.length;
        for(i=0;i<n;i++){
            if(nums[i]>=0)
                break;
        }
        for(int j=0;j<n;j++)
            nums[j]=nums[j]*nums[j];

        int j=i-1,k=0;
        int[] arr=new int[n];

        while(j>=0 && i<n){
            if(nums[i]<nums[j])
                arr[k++]=nums[i++];
            else
                arr[k++]=nums[j--];
        }
        while(j>=0)
            arr[k++]=nums[j--];

        while(i<n)
            arr[k++]=nums[i++];
        return arr;
        
        
    }
}
