540. Single Element in a Sorted Array
Solved
Medium
Topics
premium lock icon
Companies
You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once.

Return the single element that appears only once.

Your solution must run in O(log n) time and O(1) space.

 

Example 1:

Input: nums = [1,1,2,3,3,4,4,8,8]
Output: 2
Example 2:

Input: nums = [3,3,7,7,10,11,11]
Output: 10
 

Constraints:

1 <= nums.length <= 105
0 <= nums[i] <= 105

class Solution {
    public int singleNonDuplicate(int[] nums) {
        int left = 0, right = nums.length - 1;

        while (left < right) {
            int mid = left + (right - left) / 2;

            // Ensure mid is even (so mid and mid+1 form a pair)
            if (mid % 2 == 1) {
                mid--;
            }

            // If pair is valid, the single element is on the right
            if (nums[mid] == nums[mid + 1]) {
                left = mid + 2;
            } 
            // Otherwise, the single element is on the left (or at mid)
            else {
                right = mid;
            }
        }

        // When left == right, that's the single element
        return nums[left];
    }
}
